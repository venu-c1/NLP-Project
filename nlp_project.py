# -*- coding: utf-8 -*-
"""nlp_project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NWUOqFKKuhBxtlm8Xucd8RwGzXqSxFaT
"""

!pip install git+https://github.com/openai/whisper.git

!sudo apt update && sudo apt install ffmpeg

import whisper

model1 = whisper.load_model("large")
result = model1.transcribe("0.mp3")

result1=model1.transcribe("/content/10000 (1).mp3")

text2=result['text']

text2

text=result['text']

text

result2 = model.transcribe("10001.mp3")

result2['text']

import pandas as pd

input_text_file = 'train_combine.txt'

output_excel_file = 'train_combine.csv'

df = pd.read_csv(input_text_file, delimiter='\t')

# Save the data to an Excel file
df.to_csv(output_excel_file, index=False)

print(f"Text file '{input_text_file}' converted to Excel file '{output_excel_file}' successfully.")

df1=pd.read_csv('train_combine.csv',header=None)

column=['label','script']

df1['__label__Gujarati']

df1.head()

df1.shape

df1.columns

data=pd.read_csv('train_combine_modified.csv')

data.head()

data

data['Script_languages'].unique()

data['Script']=data['Unnamed: 2']

data['Script_languages']=data['Unnamed: 2']+ data['Unnamed: 3']+data['Unnamed: 4']

data.drop('Script_languages',inplace=True,axis=1)

data_hindi=pd.DataFrame(data[data['Language']=='_Hindi'].reset_index())

data_hindi.drop('index',inplace=True,axis=1)

data_gujarati=pd.DataFrame(data[data['Language']=='_Gujarati'].reset_index())

data_gujarati.drop('index',inplace=True,axis=1)

data_Tamil=pd.DataFrame(data[data['Language']=='_Tamil'].reset_index())

data_Tamil.drop('index',inplace=True,axis=1)

data_Tamil

data_Marathi=pd.DataFrame(data[data['Language']=='_Marathi'].reset_index())

data_Marathi.drop('index',inplace=True,axis=1)

data_Telugu=pd.DataFrame(data[data['Language']=='_Telugu'].reset_index())

data_Telugu.drop('index',inplace=True,axis=1)

main_df=pd.concat(['data_hindi','data_Marathi','data_gujarati','data_Tamil','data_Telugu'],axis=0)

data_Telugu.dtypes

data_Marathi.dtypes

series_from_object_dtype = data_Marathi['Language'].apply(lambda x: pd.Series(x))

data_Marathi

data.to_csv('lang_dataset.csv')

main_data=data[(data['Language']=='_Marathi') | (data['Language']=='_Hindi') | (data['Language']=='_Gujarati') | (data['Language']=='_Tamil') | (data['Language']=='_Telugu')].reset_index()

main_data.drop('index',axis=1,inplace=True)

main_data.to_csv('final_dataset.csv')

import pandas as pd

dataset=pd.read_csv('final_dataset.csv')

dataset.head()

dataset.drop('Unnamed: 0',inplace=True,axis=1)

dataset.shape

dataset['Language'].value_counts()

import nltk
from nltk.stem import PorterStemmer
from nltk.corpus import stopwords
import re
nltk.download('stopwords')

ps=PorterStemmer()
corpus=[]

for i in range(len(dataset['Script'])):
  rev =re.sub("^[a-zA-Z]"," ",dataset['Script'][i])
  rev=rev.lower()
  rev=rev.split()
  rev=[ps.stem(word) for word in rev if set(stopwords.words())]
  rev=' '.join(rev)
  corpus.append(rev)

from sklearn.feature_extraction.text import CountVectorizer

cv=CountVectorizer(max_features=1000)
X=cv.fit_transform(corpus).toarray()

from sklearn.preprocessing import LabelEncoder
label=LabelEncoder()
y=label.fit_transform(dataset['Language'])

y

import numpy as np

data1=pd.DataFrame(np.c_[corpus,y],columns=['Sentence','Language'])

dataset.head(5)

data1

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)

from sklearn.naive_bayes import MultinomialNB

classifier=MultinomialNB()

classifier.fit(X_train,y_train)

pred=classifier.predict(X_test)

from sklearn.metrics import accuracy_score

print(accuracy_score(y_test,pred))

data2=pd.DataFrame(np.c_[y_test,pred],columns=['Actual','Predicted'])

data2

import joblib

joblib.dump(classifier,"language_detection.sav")

model=joblib.load('language_detection.sav')

def test_function(sentence):
  languages={
      '_Gujarati':0,
      '_Hindi':1,
      '_Marathi':2,
      '_Tamil':3,
      '_Telugu':4

  }
  rev =re.sub("^[a-zA-Z]"," ",sentence)
  rev=rev.lower()
  rev=rev.split()
  rev=[ps.stem(word) for word in rev if set(stopwords.words())]
  rev=' '.join(rev)
  corpus.append(rev)

  rev=cv.transform([rev]).toarray()
  output=model.predict(rev)[0]


  keys=list(languages)
  values=list(languages.values())
  position=values.index(output)

  output=keys[position]
  print(output)

test_function('इवडिज आज आमी तुम्हाला सुचना देवं ठेवता हो। सासु बाहिन नी आज्ना करवी।')

test_function('કાયને કોત્રોમા, જાડેઓમા, વેરાન્મા રગ્દોર્દા ભાટ્કોન્છ્ટ્ર્ટ્ર્ટ્ર્ટ્ટ્ટ્ટ્ટ્ટ્ટ')

test_function('ಮಣಿಷಿ ಮನಂಗಡಾ ತನಾ ದಿಹಂಂ ಅನಂಮತಿಂಚಿನಂತಮಿರಾಕಿಯನನನಾ')

test_function(text)

from sklearn.svm import SVC

svc = SVC()

svc.fit(X_train,y_train)

y_pred = svc.predict(X_test)

from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy: {accuracy:.2f}')
print(classification_report(y_test, y_pred))
print(confusion_matrix(y_test, y_pred))

from sklearn.ensemble import RandomForestClassifier

rf_classifier = RandomForestClassifier(n_estimators=100, random_state=42)

rf_classifier.fit(X_train, y_train)

y_pred1 = rf_classifier.predict(X_test)

accuracy = accuracy_score(y_test, y_pred1)
print(f'Accuracy: {accuracy:.2f}')
print(classification_report(y_test, y_pred))
print(confusion_matrix(y_test, y_pred))

from sklearn.tree import DecisionTreeClassifier

dt_classifier = DecisionTreeClassifier(random_state=42)

dt_classifier.fit(X_train, y_train)

y_pred = dt_classifier.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy: {accuracy:.2f}')
print(classification_report(y_test, y_pred))
print(confusion_matrix(y_test, y_pred))